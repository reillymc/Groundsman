using System.IO;
using System.Reflection;
using Groundsman.Models;
using Xamarin.Essentials;

namespace Groundsman
{
    public static class Constants
    {
        // Files paths and names
        private static readonly string DATA_PATH = FileSystem.AppDataDirectory;
        private static readonly string CACHE_PATH = FileSystem.CacheDirectory;

        private const string FEATURES_FILENAME = "locations.json";
        private const string DELETED_FEATURE_FILENAME = "deleted.json";
        private const string EXPORT_LOG_FILENAME = "Groundsman Log.csv";

        public static readonly string FEATURES_FILE = Path.Combine(DATA_PATH, FEATURES_FILENAME);
        public static readonly string DELETED_FEATURE_FILE = Path.Combine(CACHE_PATH, DELETED_FEATURE_FILENAME);
        public static readonly string EXPORT_LOG_FILE = Path.Combine(CACHE_PATH, EXPORT_LOG_FILENAME);


        // Preference keys
        public const string UserIDKey = "UserID";
        public const string GPSPrecisionKey = "GPSPrecision";
        public const string DecimalAccuracyKey = "DecimalAccuracy";
        public const string ShakeToUndoKey = "EnableShakeToUndo";
        public const string MapDrawPointsKey = "ShowPointsOnMap";
        public const string MapDrawLinesKey = "ShowLinesOnMap";
        public const string MapDrawPolygonsKey = "ShowPolygonsOnMap";
        public const string ShareLogAsGeoJSONKey = "ShareLogAsGeoJSONKey";


        // Hardcoded feature property keys
        public const string IdentifierProperty = "id";
        public const string NameProperty = "name";
        public const string DateProperty = "date";
        public const string AuthorProperty = "author";
        public const string LogTimestampsProperty = "timestamps";

        // Feature property values
        public const string NewFeatureID = "-1";
        public const string DefaultUserValue = "Groundsman";
        public const int DefaultGPSPrecisionValue = 2;
        public const int DefaultDecimalAccuracyValue = 6;

        /// <summary>
        /// Fetches the local features list file if it exists, otherwise the default feature list
        /// </summary>
        /// <returns>Contents of file (serialised GeoJSON)</returns>
        public static string FeaturesFileContents => File.Exists(FEATURES_FILE) ? File.ReadAllText(FEATURES_FILE) : null;

        /// <summary>
        /// Gets the default features list
        /// </summary>
        /// <returns>Serialised GeoJSON contents of the default features list</returns>
        public static string GetTemplateFile()
        {
            Assembly assembly = IntrospectionExtensions.GetTypeInfo(Xamarin.Forms.Application.Current.GetType()).Assembly;
            Stream stream = assembly.GetManifestResourceStream("Groundsman.locationsAutoGenerated.json");
            using StreamReader reader = new StreamReader(stream);
            return reader.ReadToEnd();
        }

        /// <summary>
        /// Gives the correct export file name and extension
        /// </summary>
        /// <param name="fileName">Name of the export file</param>
        /// <param name="type">the filetype to export to</param>
        /// <returns>Full export file path string</returns>
        public static string GetExportFile(string fileName, ExportType type) => type switch
        {
            ExportType.GeoJSON => Path.Combine(CACHE_PATH, fileName + ".json"),
            ExportType.CSV => Path.Combine(CACHE_PATH, fileName + ".csv"),
            _ => Path.Combine(CACHE_PATH, fileName),
        };

        public static bool FirstRun
        {
            get => Preferences.Get(nameof(FirstRun), true);
            set => Preferences.Set(nameof(FirstRun), value);
        }
    }
}