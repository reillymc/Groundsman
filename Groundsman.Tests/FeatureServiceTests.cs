using System.Collections.ObjectModel;
using System.IO;
using System.Threading.Tasks;
using Groundsman.Models;
using Groundsman.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Groundsman.Tests
{
    [TestClass]
    public class FeatureServiceTests
    {
        private FeatureService featureService;

        private GeoJSONObject DefaultFeatures => GeoJSONObject.ImportGeoJSON(File.ReadAllText("locationsAutoGenerated.json"));

        private Feature DefaultPoint => new Feature(new Point(new Position(10, 10)));

        private void AddFeature() => _ = featureService.SaveItem(DefaultPoint);

        [TestInitialize]
        public void TestInitialize() => featureService = new FeatureService();

        /// <summary>
        /// Try to add a feature
        /// </summary>
        [TestMethod]
        public void AddFeatureTest()
        {
            _ = featureService.SaveItem(DefaultPoint);

            Assert.AreEqual(1, featureService.FeatureList.Count);
        }

        ///// <summary>
        ///// Try to import a feature
        ///// </summary>
        //[TestMethod]
        //public async Task ImportFeatureTest()
        //{
        //    int success = await featureService.ImportItem(DefaultPoint);

        //    Assert.AreEqual(1, success);
        //    Assert.AreEqual(1, featureService.FeatureList.Count);
        //}

        /// <summary>
        /// Try to import features
        /// </summary>
        //[TestMethod]
        //public void ImportFeaturesTest()
        //{
        //    FeatureCollection featureCollection = (FeatureCollection)DefaultFeatures;

        //    _ = featureService.ImportItems(featureCollection.Features);

        //    Assert.AreEqual(3, featureService.FeatureList.Count);
        //}


        /// <summary>
        /// Try to delete a feature
        /// </summary>
        [TestMethod]
        public void DeleteFeatureTest()
        {
            AddFeature();

            _ = featureService.DeleteItem(featureService.FeatureList[0]);

            Assert.AreEqual(0, featureService.FeatureList.Count);
        }


        /// <summary>
        /// Try to update a feature
        /// </summary>
        [TestMethod]
        public void UpdateFeatureTest()
        {
            AddFeature();
            Feature feature = featureService.FeatureList[0];
            feature.Properties.Add("Test", "Test");
            _ = featureService.SaveItem(feature);

            Assert.IsTrue(featureService.FeatureList[0].Properties.ContainsKey("Test"));
        }


        /// <summary>
        /// Try to import from a GeoJSON string
        /// </summary>
        [TestMethod]
        public void ImportRawContentsTest()
        {
            _ = featureService.ImportRawContents(File.ReadAllText("locationsAutoGenerated.json"));

            Assert.AreEqual(3, featureService.FeatureList.Count);
        }
    }
}
